name: Security Scan

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  secret-detection:
    name: Detect Hardcoded Secrets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for scanning

      - name: Run Trufflehog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: Custom Secret Pattern Detection
        run: |
          echo "Scanning for hardcoded secrets patterns..."
          
          # Exit code tracking
          EXIT_CODE=0
          
          # Define patterns to search for
          declare -A PATTERNS=(
            ["AWS Access Key"]="AKIA[0-9A-Z]{16}"
            ["AWS Secret Key"]="[0-9a-zA-Z/+=]{40}"
            ["API Key Generic"]="[aA][pP][iI]_?[kK][eE][yY].*['\"][0-9a-zA-Z]{32,}['\"]"
            ["Stripe Secret Key"]="sk_live_[0-9a-zA-Z]{24,}"
            ["Stripe Restricted Key"]="rk_live_[0-9a-zA-Z]{24,}"
            ["Private Key"]="-----BEGIN.*PRIVATE KEY-----"
            ["Google API Key"]="AIza[0-9A-Za-z\\-_]{35}"
            ["Slack Token"]="xox[baprs]-[0-9a-zA-Z]{10,48}"
            ["Generic Secret"]="[sS][eE][cC][rR][eE][tT].*['\"][0-9a-zA-Z]{32,}['\"]"
            ["Password in URL"]="[a-zA-Z]{3,10}://[^/\\s:@]{3,20}:[^/\\s:@]{3,20}@.{1,100}[\"'\\s]"
            ["JWT Token"]="eyJ[A-Za-z0-9-_=]+\\.eyJ[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_.+/=]+"
          )
          
          # Files to exclude from scanning
          EXCLUDE_PATTERNS=(
            "*.md"
            "*.lock"
            "*.sum"
            "node_modules/*"
            ".git/*"
            "dist/*"
            "build/*"
            ".next/*"
            "coverage/*"
            "*.test.*"
            "*.spec.*"
            "__tests__/*"
            "*.snap"
          )
          
          # Build grep exclude arguments
          EXCLUDE_ARGS=""
          for pattern in "${EXCLUDE_PATTERNS[@]}"; do
            EXCLUDE_ARGS="$EXCLUDE_ARGS --exclude=$pattern"
          done
          
          # Scan for each pattern
          for key in "${!PATTERNS[@]}"; do
            echo "Checking for $key..."
            
            if grep -rEn $EXCLUDE_ARGS "${PATTERNS[$key]}" . 2>/dev/null | grep -v "security-scan.yml"; then
              echo "❌ Found potential $key"
              EXIT_CODE=1
            else
              echo "✅ No $key found"
            fi
            echo ""
          done
          
          # Additional checks for common secret files
          echo "Checking for sensitive files..."
          SENSITIVE_FILES=(
            ".env"
            ".env.local"
            ".env.production"
            ".env.staging"
            "*.pem"
            "*.key"
            "*.p12"
            "*.pfx"
            "id_rsa"
            "id_dsa"
            "id_ecdsa"
            "id_ed25519"
          )
          
          for file_pattern in "${SENSITIVE_FILES[@]}"; do
            if find . -name "$file_pattern" -not -path "*/node_modules/*" -not -path "*/.git/*" 2>/dev/null | grep -q .; then
              echo "❌ Found sensitive file pattern: $file_pattern"
              find . -name "$file_pattern" -not -path "*/node_modules/*" -not -path "*/.git/*"
              EXIT_CODE=1
            fi
          done
          
          if [ $EXIT_CODE -eq 0 ]; then
            echo "✅ No secrets detected!"
          else
            echo "❌ Potential secrets found! Please review and remove them."
            echo ""
            echo "If these are false positives, you can:"
            echo "1. Move secrets to environment variables"
            echo "2. Use .gitsecrets or .gitignore to exclude files"
            echo "3. Add exceptions to this workflow with proper documentation"
          fi
          
          exit $EXIT_CODE

  dependency-check:
    name: Check Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          echo "Running npm audit..."
          npm audit --production --audit-level=high || EXIT_CODE=$?
          
          if [ "${EXIT_CODE:-0}" -ne 0 ]; then
            echo "❌ High or critical vulnerabilities found!"
            echo "Run 'npm audit fix' to attempt automatic fixes"
            exit 1
          else
            echo "✅ No high or critical vulnerabilities found"
          fi

  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/jwt
            p/javascript
            p/typescript
            p/nodejs
          auditOn: push

  code-quality:
    name: Security Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for console.log statements
        run: |
          echo "Checking for console.log statements that might leak sensitive data..."
          
          if grep -rn "console\\.log" --include="*.js" --include="*.ts" --exclude-dir=node_modules --exclude-dir=.git --exclude-dir=dist --exclude-dir=__tests__ . | grep -v "// eslint-disable-line" | grep -v "security-scan.yml"; then
            echo "⚠️  Found console.log statements. Ensure they don't log sensitive data in production."
          else
            echo "✅ No console.log statements found"
          fi

      - name: Check environment variable usage
        run: |
          echo "Documenting required environment variables..."
          echo ""
          echo "Environment variables found in code:"
          grep -rho "process\\.env\\.[A-Z_][A-Z0-9_]*" --include="*.js" --include="*.ts" --exclude-dir=node_modules --exclude-dir=.git . | sort | uniq | sed 's/process\.env\.//'
          
          echo ""
          echo "Ensure all these are documented and have secure defaults!"

  security-headers-check:
    name: Security Headers Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for security headers implementation
        run: |
          echo "Checking for security headers implementation..."
          
          REQUIRED_HEADERS=(
            "helmet"
            "X-Content-Type-Options"
            "X-Frame-Options"
            "X-XSS-Protection"
            "Strict-Transport-Security"
            "Content-Security-Policy"
          )
          
          for header in "${REQUIRED_HEADERS[@]}"; do
            if grep -r "$header" --include="*.js" --include="*.ts" --exclude-dir=node_modules . > /dev/null; then
              echo "✅ Found implementation for $header"
            else
              echo "⚠️  No implementation found for $header"
            fi
          done

  create-security-report:
    name: Create Security Report
    runs-on: ubuntu-latest
    needs: [secret-detection, dependency-check, sast-scan, code-quality]
    if: always()
    steps:
      - name: Create security report
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "Date: $(date -u)" >> security-report.md
          echo "Commit: ${{ github.sha }}" >> security-report.md
          echo "" >> security-report.md
          
          echo "## Scan Results" >> security-report.md
          echo "- Secret Detection: ${{ needs.secret-detection.result }}" >> security-report.md
          echo "- Dependency Check: ${{ needs.dependency-check.result }}" >> security-report.md
          echo "- SAST Scan: ${{ needs.sast-scan.result }}" >> security-report.md
          echo "- Code Quality: ${{ needs.code-quality.result }}" >> security-report.md
          
      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md
          retention-days: 30

      - name: Comment PR (if applicable)
        if: github.event_name == 'pull_request' && (needs.secret-detection.result == 'failure' || needs.dependency-check.result == 'failure')
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '⚠️ **Security scan failed!** Please review the security scan results and fix any issues before merging.'
            })