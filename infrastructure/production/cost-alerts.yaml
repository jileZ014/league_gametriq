apiVersion: v1
kind: ConfigMap
metadata:
  name: cost-alerts-config
  namespace: gametriq-production
  labels:
    app: gametriq-cost-management
    environment: production
data:
  cost-alerts.yaml: |
    # GameTriq Basketball League Management Platform
    # Cost Monitoring and Alert Configuration
    # Production Environment Cost Management
    
    # Global Cost Management Settings
    global:
      currency: "USD"
      billing_cycle: "monthly"
      fiscal_year_start: "01-01"
      cost_center: "gametriq-platform"
      
      # Cost allocation tags
      mandatory_tags:
        - Environment
        - Service
        - Team
        - CostCenter
        - Project
        
    # Budget Definitions
    budgets:
      # Overall Platform Budget
      platform_total:
        name: "GameTriq Platform Total"
        amount: 15000  # $15,000 per month
        period: "MONTHLY"
        unit: "USD"
        
        # Alert thresholds
        alerts:
          - threshold: 50    # 50% of budget ($7,500)
            type: "PERCENTAGE"
            severity: "info"
            notification: ["email"]
            
          - threshold: 75    # 75% of budget ($11,250)
            type: "PERCENTAGE"
            severity: "warning"
            notification: ["email", "slack"]
            
          - threshold: 90    # 90% of budget ($13,500)
            type: "PERCENTAGE"
            severity: "critical"
            notification: ["email", "slack", "pagerduty"]
            
          - threshold: 100   # 100% of budget ($15,000)
            type: "PERCENTAGE"
            severity: "critical"
            notification: ["email", "slack", "pagerduty"]
            auto_actions: ["scale_down_non_critical"]
            
        # Forecasting alerts
        forecast_alerts:
          - threshold: 110   # Forecasted 110% spend
            period: "month_end"
            severity: "warning"
            notification: ["email", "slack"]
      
      # Service-specific Budgets
      compute_services:
        name: "Compute Services (EKS, EC2)"
        amount: 6000   # $6,000 per month
        period: "MONTHLY"
        
        filters:
          service_names:
            - "Amazon Elastic Kubernetes Service"
            - "Amazon Elastic Compute Cloud - Compute"
            - "Amazon EC2-Instance"
            
        alerts:
          - threshold: 80
            type: "PERCENTAGE"
            severity: "warning"
            notification: ["slack"]
            
          - threshold: 95
            type: "PERCENTAGE"
            severity: "critical"
            notification: ["email", "slack"]
      
      database_services:
        name: "Database Services (RDS, ElastiCache)"
        amount: 3000   # $3,000 per month
        period: "MONTHLY"
        
        filters:
          service_names:
            - "Amazon Relational Database Service"
            - "Amazon ElastiCache"
            
        alerts:
          - threshold: 85
            type: "PERCENTAGE"
            severity: "warning"
            
          - threshold: 100
            type: "PERCENTAGE" 
            severity: "critical"
            auto_actions: ["optimize_database_instances"]
      
      storage_services:
        name: "Storage Services (S3, EBS)"
        amount: 2000   # $2,000 per month
        period: "MONTHLY"
        
        filters:
          service_names:
            - "Amazon Simple Storage Service"
            - "Amazon Elastic Block Store"
            
        alerts:
          - threshold: 90
            type: "PERCENTAGE"
            severity: "warning"
            auto_actions: ["cleanup_old_backups"]
      
      networking_services:
        name: "Networking (CloudFront, Load Balancers)"
        amount: 1500   # $1,500 per month
        period: "MONTHLY"
        
        filters:
          service_names:
            - "Amazon CloudFront"
            - "Elastic Load Balancing"
            - "Amazon Route 53"
            
        alerts:
          - threshold: 85
            type: "PERCENTAGE"
            severity: "warning"
      
      observability_services:
        name: "Monitoring & Logging (CloudWatch, DataDog)"
        amount: 1000   # $1,000 per month
        period: "MONTHLY"
        
        filters:
          service_names:
            - "Amazon CloudWatch"
            - "AWS X-Ray"
            
        alerts:
          - threshold: 80
            type: "PERCENTAGE"
            severity: "warning"
            auto_actions: ["optimize_log_retention"]
      
      # Environment-specific budgets
      production_environment:
        name: "Production Environment"
        amount: 12000  # $12,000 per month (80% of total)
        period: "MONTHLY"
        
        filters:
          tags:
            Environment: "production"
            
        alerts:
          - threshold: 85
            type: "PERCENTAGE"
            severity: "warning"
      
      staging_environment:
        name: "Staging Environment"  
        amount: 2000   # $2,000 per month (13% of total)
        period: "MONTHLY"
        
        filters:
          tags:
            Environment: "staging"
            
        alerts:
          - threshold: 90
            type: "PERCENTAGE"
            severity: "warning"
            auto_actions: ["scale_down_staging"]
      
      development_environment:
        name: "Development Environment"
        amount: 1000   # $1,000 per month (7% of total)
        period: "MONTHLY"
        
        filters:
          tags:
            Environment: "development"
            
        alerts:
          - threshold: 95
            type: "PERCENTAGE"
            severity: "critical"
            auto_actions: ["stop_dev_instances"]
    
    # Cost Anomaly Detection
    anomaly_detection:
      enabled: true
      
      # Service-level anomaly detection
      services:
        compute:
          threshold: 25      # 25% increase from baseline
          sensitivity: "MEDIUM"
          
        database:
          threshold: 30      # 30% increase (databases can spike)
          sensitivity: "LOW"
          
        storage:
          threshold: 20      # 20% increase (should be predictable)
          sensitivity: "HIGH"
          
        networking:
          threshold: 40      # 40% increase (traffic can vary)
          sensitivity: "LOW"
      
      # Daily cost increase alerts
      daily_increase:
        threshold: 200     # $200 daily increase
        type: "ABSOLUTE"
        severity: "warning"
        
      # Weekly trend alerts  
      weekly_trend:
        threshold: 15      # 15% week-over-week increase
        type: "PERCENTAGE"
        severity: "info"
    
    # Resource-specific Cost Alerts
    resources:
      # EC2 Instance cost alerts
      ec2_instances:
        large_instances:
          threshold: 500   # $500/month per instance
          instance_types: ["m5.2xlarge", "m5.4xlarge", "m5.8xlarge"]
          severity: "warning"
          
        unused_instances:
          cpu_threshold: 5     # Less than 5% CPU utilization
          duration_hours: 168  # For 7 days (168 hours)
          severity: "warning"
          auto_actions: ["stop_unused_instances"]
          
      # RDS Database cost alerts
      rds_instances:
        oversized_databases:
          cpu_threshold: 20    # Less than 20% CPU
          memory_threshold: 40  # Less than 40% memory
          duration_hours: 336   # For 14 days
          severity: "warning"
          
        expensive_instances:
          threshold: 800       # $800/month per instance
          severity: "critical"
          
      # S3 Storage cost alerts
      s3_buckets:
        large_buckets:
          size_threshold: 1000  # 1TB
          cost_threshold: 200   # $200/month
          severity: "info"
          
        old_data:
          age_days: 90
          storage_class: "STANDARD"
          severity: "warning"
          auto_actions: ["transition_to_ia"]
          
      # ElastiCache cost alerts
      elasticache:
        expensive_clusters:
          threshold: 400       # $400/month
          severity: "warning"
          
        unused_clusters:
          connection_threshold: 1  # Less than 1 connection
          duration_hours: 72       # For 3 days
          severity: "critical"
    
    # Automated Cost Optimization Actions
    automation:
      # Instance optimization
      right_sizing:
        enabled: true
        schedule: "0 2 * * 0"  # Weekly on Sunday at 2 AM
        
        rules:
          - name: "Downsize underutilized instances"
            cpu_threshold: 25
            memory_threshold: 50
            duration_days: 14
            action: "recommend"  # Don't auto-resize in production
            
          - name: "Stop unused dev instances"
            environment: "development"
            cpu_threshold: 5
            duration_hours: 72
            action: "stop"
            
          - name: "Scale down staging at night"
            environment: "staging"
            schedule: "0 22 * * 1-5"  # 10 PM on weekdays
            action: "scale_down"
            restore_schedule: "0 6 * * 1-5"  # 6 AM on weekdays
      
      # Storage optimization
      storage_lifecycle:
        s3_transitions:
          to_ia_days: 30        # Standard to IA after 30 days
          to_glacier_days: 90   # IA to Glacier after 90 days
          to_deep_archive_days: 365  # Glacier to Deep Archive after 1 year
          
        backup_cleanup:
          retention_days: 90    # Keep backups for 90 days
          schedule: "0 3 * * *" # Daily at 3 AM
          
        log_retention:
          cloudwatch_days: 14   # CloudWatch logs retention
          application_days: 30  # Application logs retention
    
    # Cost Reporting
    reporting:
      # Daily cost reports
      daily_reports:
        enabled: true
        schedule: "0 8 * * *"  # Daily at 8 AM
        recipients: ["finance@gametriq.com", "ops@gametriq.com"]
        
        content:
          - daily_spend
          - top_services
          - cost_trends
          - budget_status
          
      # Weekly cost analysis
      weekly_reports:
        enabled: true
        schedule: "0 8 * * 1"  # Monday at 8 AM
        recipients: ["leadership@gametriq.com", "engineering@gametriq.com"]
        
        content:
          - weekly_trends
          - cost_optimization_opportunities
          - budget_forecast
          - resource_utilization
          
      # Monthly budget review
      monthly_reports:
        enabled: true
        schedule: "0 9 1 * *"  # First day of month at 9 AM
        recipients: ["cfo@gametriq.com", "cto@gametriq.com"]
        
        content:
          - monthly_budget_summary
          - cost_by_service
          - cost_by_environment
          - year_over_year_comparison
          - optimization_recommendations
    
    # Notification Channels
    notifications:
      email:
        smtp_server: "ses.amazonaws.com"
        from_address: "alerts@gametriq.com"
        
        templates:
          budget_alert: |
            Subject: Cost Alert: {{ budget_name }} at {{ threshold }}% of budget
            
            The {{ budget_name }} has reached {{ current_percentage }}% of its monthly budget.
            
            Current Spend: ${{ current_spend }}
            Budget Limit: ${{ budget_limit }}
            Remaining: ${{ remaining_budget }}
            
            Projected Monthly Spend: ${{ projected_spend }}
            
            {{ #if auto_actions }}
            Automatic actions taken: {{ auto_actions }}
            {{ /if }}
            
          anomaly_alert: |
            Subject: Cost Anomaly Detected: {{ service_name }}
            
            An unusual cost increase has been detected for {{ service_name }}.
            
            Current Daily Cost: ${{ current_cost }}
            Expected Daily Cost: ${{ expected_cost }}
            Increase: {{ percentage_increase }}%
            
            Please review recent changes and resource usage.
      
      slack:
        webhook_url: "https://hooks.slack.com/services/WEBHOOK_URL"
        channel: "#cost-alerts"
        
        templates:
          budget_warning: |
            :warning: *Cost Alert* - {{ budget_name }}
            
            Current spend: ${{ current_spend }} ({{ current_percentage }}%)
            Budget: ${{ budget_limit }}
            Status: {{ #if over_budget }}OVER BUDGET{{ else }}{{ threshold }}% threshold reached{{ /if }}
            
          cost_optimization: |
            :money_with_wings: *Cost Optimization Opportunity*
            
            Service: {{ service_name }}
            Potential Savings: ${{ potential_savings }}/month
            Action: {{ recommended_action }}
      
      pagerduty:
        integration_key: "PAGERDUTY_INTEGRATION_KEY"
        severity_mapping:
          info: "info"
          warning: "warning"  
          critical: "critical"
    
    # Cost Allocation and Chargeback
    chargeback:
      enabled: true
      
      # Team allocations
      teams:
        platform_engineering:
          percentage: 40
          services: ["infrastructure", "monitoring", "security"]
          
        product_engineering:
          percentage: 35  
          services: ["application_services", "databases"]
          
        data_analytics:
          percentage: 15
          services: ["reporting", "analytics", "data_pipeline"]
          
        operations:
          percentage: 10
          services: ["backups", "disaster_recovery", "compliance"]
          
      # Service allocations
      allocation_rules:
        - tag_key: "Team"
          allocation_method: "proportional"
          
        - tag_key: "Environment"
          allocation_method: "direct"
          
        - tag_key: "Service"
          allocation_method: "direct"
    
    # Cost Governance
    governance:
      # Resource approval workflows
      approvals:
        large_instances:
          instance_types: ["m5.8xlarge", "m5.12xlarge", "m5.16xlarge"]
          monthly_cost_threshold: 1000
          approvers: ["platform-lead@gametriq.com"]
          
        expensive_databases:
          monthly_cost_threshold: 800
          approvers: ["dba@gametriq.com", "platform-lead@gametriq.com"]
          
      # Resource limits
      limits:
        development:
          max_monthly_budget: 1000
          max_instance_size: "m5.large"
          
        staging:
          max_monthly_budget: 2000
          max_instance_size: "m5.xlarge"
          
      # Resource policies
      policies:
        - name: "No untagged resources"
          condition: "missing_required_tags"
          action: "block"
          
        - name: "Environment-specific instance limits"
          condition: "instance_size_violation"
          action: "approve"
          
        - name: "Budget overage protection"
          condition: "budget_exceeded"
          action: "block"