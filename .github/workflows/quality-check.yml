name: Quality Check Pipeline

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '14'

jobs:
  # Job 1: Code Quality and Linting
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd apps/api
          npm ci --prefer-offline --no-audit

      - name: Run ESLint
        run: |
          cd apps/api
          npm run lint

      - name: Run TypeScript type check
        run: |
          cd apps/api
          npm run type-check

      - name: Check for security vulnerabilities
        run: |
          cd apps/api
          npm audit --audit-level moderate

  # Job 2: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: lint-and-typecheck

    strategy:
      matrix:
        test-group: [tournaments, payments, websockets, auth, reports]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd apps/api
          npm ci --prefer-offline --no-audit

      - name: Run unit tests
        run: |
          cd apps/api
          npm run test -- --testPathPattern=${{ matrix.test-group }} --coverage --coverageReporters=lcov --coverageDirectory=coverage/${{ matrix.test-group }}
        env:
          NODE_ENV: test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/api/coverage/${{ matrix.test-group }}/lcov.info
          flags: unit-tests,${{ matrix.test-group }}
          name: unit-${{ matrix.test-group }}
          fail_ci_if_error: true

  # Job 3: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: unit-tests

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: gametriq_test
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6380:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd apps/api
          npm ci --prefer-offline --no-audit

      - name: Wait for services
        run: |
          # Wait for PostgreSQL
          while ! pg_isready -h localhost -p 5433 -U test_user; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          
          # Wait for Redis
          while ! redis-cli -h localhost -p 6380 ping; do
            echo "Waiting for Redis..."
            sleep 2
          done

      - name: Run database migrations
        run: |
          cd apps/api
          npm run db:migrate
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5433/gametriq_test

      - name: Run integration tests
        run: |
          cd apps/api
          npm run test:integration -- --coverage --coverageDirectory=coverage/integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5433/gametriq_test
          REDIS_URL: redis://localhost:6380
          JWT_SECRET: test-jwt-secret-for-integration
          STRIPE_SECRET_KEY: sk_test_fake_key_for_testing

      - name: Upload integration test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/api/coverage/integration/lcov.info
          flags: integration-tests
          name: integration
          fail_ci_if_error: true

  # Job 4: E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: integration-tests

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: gametriq_test
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6380:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd apps/api
          npm ci --prefer-offline --no-audit

      - name: Start application
        run: |
          cd apps/api
          npm run start:prod &
          sleep 10
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5433/gametriq_test
          REDIS_URL: redis://localhost:6380
          JWT_SECRET: test-jwt-secret-for-e2e
          PORT: 3001

      - name: Run E2E tests
        run: |
          cd apps/api
          npm run test:e2e -- --coverage --coverageDirectory=coverage/e2e
        env:
          NODE_ENV: test
          TEST_BASE_URL: http://localhost:3001

      - name: Upload E2E test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/api/coverage/e2e/lcov.info
          flags: e2e-tests
          name: e2e
          fail_ci_if_error: true

  # Job 5: Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: e2e-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: gametriq_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6380:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd apps/api
          npm ci --prefer-offline --no-audit

      - name: Run performance tests
        run: |
          cd apps/api
          npm run test:performance
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5433/gametriq_test
          REDIS_URL: redis://localhost:6380

      - name: Upload performance test results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: apps/api/performance-results.json
          retention-days: 30

  # Job 6: SonarQube Analysis
  sonarqube-analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [unit-tests, integration-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for better analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd apps/api
          npm ci --prefer-offline --no-audit

      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports
          path: apps/api/coverage

      - name: SonarQube Scan
        uses: sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: SonarQube Quality Gate Check
        uses: sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Job 7: Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: lint-and-typecheck

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd apps/api
          npm ci --prefer-offline --no-audit

      - name: Run npm audit
        run: |
          cd apps/api
          npm audit --audit-level high --production

      - name: Run Semgrep security scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/nodejs
            p/typescript
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # Job 8: Build and Docker Image
  build-and-docker:
    name: Build & Docker
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [security-scan, sonarqube-analysis]
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd apps/api
          npm ci --prefer-offline --no-audit --production=false

      - name: Build application
        run: |
          cd apps/api
          npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/api
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: |
            gametriq/api:latest
            gametriq/api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Job 9: Coverage Merge and Report
  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [unit-tests, integration-tests, e2e-tests]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Download all coverage reports
        uses: actions/download-artifact@v4
        with:
          path: coverage-reports

      - name: Merge coverage reports
        run: |
          npm install -g nyc
          nyc merge coverage-reports/ coverage.json
          nyc report --reporter=lcov --reporter=text --reporter=html

      - name: Upload merged coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: merged
          name: merged-coverage
          fail_ci_if_error: false

      - name: Coverage Summary
        run: |
          npm install -g coverage-summary
          coverage-summary coverage.json

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: ./coverage/lcov.info
          delete-old-comments: true

  # Job 10: Quality Gate
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [sonarqube-analysis, coverage-report, performance-tests]
    if: always()

    steps:
      - name: Check Quality Gate Status
        run: |
          echo "Checking quality gate status..."
          
          # Check if all required jobs passed
          if [[ "${{ needs.sonarqube-analysis.result }}" != "success" ]]; then
            echo "❌ SonarQube analysis failed"
            exit 1
          fi
          
          if [[ "${{ needs.coverage-report.result }}" != "success" ]]; then
            echo "❌ Coverage report failed"
            exit 1
          fi
          
          # Performance tests are only run on main branch
          if [[ "${{ github.ref }}" == "refs/heads/main" && "${{ needs.performance-tests.result }}" != "success" ]]; then
            echo "❌ Performance tests failed"
            exit 1
          fi
          
          echo "✅ All quality checks passed!"

      - name: Quality Gate Summary
        run: |
          echo "## Quality Gate Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| SonarQube | ${{ needs.sonarqube-analysis.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Coverage | ${{ needs.coverage-report.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance | ${{ needs.performance-tests.result == 'success' && '✅ Passed' || needs.performance-tests.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY

  # Notification Job
  notify:
    name: Notifications
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [quality-gate]
    if: always()

    steps:
      - name: Notify on Success
        if: needs.quality-gate.result == 'success'
        run: |
          echo "🎉 All quality checks passed! Ready for deployment."
          # Add Slack/Discord notification here if needed

      - name: Notify on Failure
        if: needs.quality-gate.result == 'failure'
        run: |
          echo "❌ Quality gate failed. Please review the failing checks."
          # Add failure notification here if needed